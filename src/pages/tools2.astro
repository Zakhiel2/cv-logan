---
import { getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";

// main layout
import BaseLayout from "@/layouts/BaseLayout.astro";

// components
import Button from "@components/button/Button.astro";
import ToolsComponent from "@components/resume/Tools.astro";

// utils
import { getLocaleFromUrl, filterCollectionByLanguage } from "@js/localeUtils";
import { useTranslations } from "@js/translationUtils";

const currLocale = getLocaleFromUrl(Astro.url);
const resumes = await getCollection("resume");

// get rid of pages from other languages and remove locale from slug
const filteredResumes = filterCollectionByLanguage(resumes, currLocale);

// should only be one resume
const resume = filteredResumes[0];

const { diplomas, experience, hardSkills, softSkills, certifications, languages, tools } =
	resume.data;

import { tools as importedTools } from '@/data/tools';

// Get unique categories and their counts
const allCategories = importedTools.flatMap(tool => tool.tags);
const categoryCount = allCategories.reduce((acc, category) => {
  acc[category] = (acc[category] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// Sort categories alphabetically but keep "All" first
const sortedCategories = Object.keys(categoryCount).sort();
const categories = ["All", ...sortedCategories];

const t = useTranslations(currLocale);

const title = "Tools and Technologies";
const description = "All the tools and technologies I know";
---

<BaseLayout type="general" title={title} description={description}>
	<div class="container mt-24 md:mt-36">
    <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4 sm:gap-6 mb-6 sm:mb-8">
      <div>
        <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white">All Tools & Technologies</h1>
        <p class="mt-2 text-sm sm:text-base text-gray-600 dark:text-gray-400">
          Showing <span id="filtered-count" class="font-medium">{importedTools.length}</span> of <span class="font-medium">{importedTools.length}</span> tools
        </p>
      </div>
      <a 
        href="/" 
        class="group inline-flex items-center gap-2 px-4 sm:px-5 py-2 sm:py-2.5 text-sm font-semibold text-white bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-500 hover:to-blue-600 rounded-full shadow-md hover:shadow-lg  hover:-translate-y-0.5 whitespace-nowrap"
      >
        <svg 
          class="w-4 h-4 transition-transform duration-200 group-hover:-translate-x-1" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to Home
      </a>
    </div>

    <div class="mb-6 sm:mb-8 bg-white dark:bg-base-900 border rounded-xl p-4 sm:p-6">
      <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-4 mb-4">
        <h2 class="text-base sm:text-lg font-medium text-gray-900 dark:text-white">Filter by Category</h2>
        <button
          id="clear-filters"
          class="text-sm text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400  flex items-center gap-2"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          Clear filters
        </button>
      </div>
      <div class="flex flex-wrap gap-2 sm:gap-3" id="category-filters">
        {categories.map((category) => (
          <button
            data-category={category}
            class:list={[
              "px-3 sm:px-4 py-1.5 sm:py-2 rounded-full text-sm font-medium  whitespace-nowrap flex items-center gap-2",
              {
                "bg-blue-500 text-white hover:bg-blue-600": category === "All",
                "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600": category !== "All"
              }
            ]}
          >
            <span>{category}</span>
            {category !== "All" && (
              <span class="inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-medium rounded-full bg-white/80 dark:bg-gray-900/80 text-gray-700 dark:text-gray-300">
                {categoryCount[category]}
              </span>
            )}
          </button>
        ))}
      </div>
    </div>

    <div 
      class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 xl:mb-32 mb-16  gap-4 sm:gap-6 min-h-[200px]" 
      id="tools-grid"
    >
      {importedTools.map((tool) => (
        <div 
          class="group hover:border-primary/30 hover:shadow-primary/5 dark:bg-base-900 rounded-xl border bg-white transition-all hover:shadow-lg p-4 sm:p-6 hover:shadow-lg hover:shadow-xl hover:-translate-y-1 relative"
          data-categories={JSON.stringify(tool.tags)}
        >
          <div class="flex items-center gap-3 sm:gap-4 mb-3 sm:mb-4">
            <div class="w-10 h-10 sm:w-12 sm:h-12 flex-shrink-0">
              <img
                src={tool.logo}
                alt={`${tool.name} logo`}
                class="w-full h-full object-contain transition-all duration-300 group-hover:opacity-100 group-hover:grayscale-0 dark:opacity-50 dark:grayscale dark:invert dark:group-hover:grayscale-100"
              />
            </div>
            <h3 class="text-base sm:text-lg font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400  truncate">
            <a
          href={tool.url}
          target="_blank"
          rel="noopener noreferrer"
        >
          {tool.name}
        </a>
          </h3>
          </div>

          <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-400 mb-3 sm:mb-4 line-clamp-2">
            {tool.description}
          </p>

          <div class="flex flex-wrap gap-1.5 sm:gap-2">
            {tool.tags.map((tag) => (
              <button
                type="button"
                data-tag={tag}
                class="px-2 sm:px-3 py-1 sm:py-1.5 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-full text-xs font-medium hover:bg-gray-200 dark:hover:bg-gray-600"
              >
                {tag}
              </button>
            ))}
          </div>

          <a
            href={tool.url}
            target="_blank"
            rel="noopener noreferrer"
            class="absolute top-3 sm:top-4 right-3 sm:right-4 p-1.5 sm:p-2 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-blue-200 dark:hover:bg-blue-600 "
          >
            <svg
              class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-gray-500 dark:text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
              />
            </svg>
          </a>
        </div>
      ))}
    </div>

    <div 
      id="no-results" 
      class="hidden text-center py-8 sm:py-12"
    >
      <p class="text-base sm:text-lg text-gray-600 dark:text-gray-400">No tools found matching the selected categories.</p>
      <button
        id="clear-filters-bottom"
        class="mt-4 text-blue-600 dark:text-blue-400 hover:underline"
      >
        Clear filters
      </button>
    </div>
  </div>

  <slot />
</BaseLayout>

<script>
  function initializeToolsFilter() {
    const categoryFilters = document.getElementById('category-filters');
    const toolsGrid = document.getElementById('tools-grid');
    const noResults = document.getElementById('no-results');
    const filteredCount = document.getElementById('filtered-count');
    const clearFiltersButtons = document.querySelectorAll('#clear-filters, #clear-filters-bottom');
    const tools = toolsGrid?.querySelectorAll('[data-categories]');
    const tagButtons = document.querySelectorAll('button[data-tag]');

    let selectedCategories = new Set(['All']);

    function updateFilteredCount(count: number) {
      if (filteredCount) {
        filteredCount.textContent = count.toString();
      }
    }

    function updateNoResults(hasResults: boolean) {
      if (!noResults || !toolsGrid) return;
      
      if (!hasResults) {
        toolsGrid.classList.add('hidden');
        noResults.classList.remove('hidden');
      } else {
        toolsGrid.classList.remove('hidden');
        noResults.classList.add('hidden');
      }
    }

    function filterTools() {
      if (!tools) return;
      
      let visibleCount = 0;

      tools.forEach(tool => {
        const toolCategories = JSON.parse(tool.getAttribute('data-categories') || '[]');
        const shouldShow = selectedCategories.has('All') || 
          toolCategories.some(category => selectedCategories.has(category));
        
        if (shouldShow) {
          visibleCount++;
          tool.classList.remove('hidden', 'animate-fade-out');
          tool.classList.add('animate-fade-in');
        } else {
          tool.classList.add('animate-fade-out');
          setTimeout(() => {
            tool.classList.add('hidden');
            tool.classList.remove('animate-fade-out');
          }, 200);
        }
      });

      updateFilteredCount(visibleCount);
      updateNoResults(visibleCount > 0);
    }

    function updateButtonStyles() {
      document.querySelectorAll('button[data-category]').forEach(btn => {
        const category = btn.getAttribute('data-category');
        if (!category) return;

        if (selectedCategories.has(category)) {
          btn.classList.add('bg-blue-500', 'text-white', 'hover:bg-blue-600');
          btn.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300', 'hover:bg-gray-200', 'dark:hover:bg-gray-600');
        } else {
          btn.classList.remove('bg-blue-500', 'text-white', 'hover:bg-blue-600');
          btn.classList.add('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300', 'hover:bg-gray-200', 'dark:hover:bg-gray-600');
        }
      });
    }

    categoryFilters?.addEventListener('click', (e) => {
      const button = (e.target as Element).closest('button[data-category]');
      if (!button) return;
      
      const category = button.getAttribute('data-category');
      if (!category) return;

      if (category === 'All') {
        selectedCategories.clear();
        selectedCategories.add('All');
      } else {
        selectedCategories.delete('All');
        
        if (selectedCategories.has(category)) {
          selectedCategories.delete(category);
          if (selectedCategories.size === 0) {
            selectedCategories.add('All');
          }
        } else {
          selectedCategories.add(category);
        }
      }

      updateButtonStyles();
      filterTools();
    });

    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tag = button.getAttribute('data-tag');
        if (tag) {
          selectedCategories.clear();
          selectedCategories.add(tag);
          updateButtonStyles();
          filterTools();
        }
      });
    });

    clearFiltersButtons.forEach(button => {
      button.addEventListener('click', () => {
        selectedCategories.clear();
        selectedCategories.add('All');
        updateButtonStyles();
        filterTools();
      });
    });

    // Initial filter
    filterTools();
  }

  initializeToolsFilter();
  document.addEventListener('astro:page-load', initializeToolsFilter);
</script>

<style>
  .animate-fade-in {
    animation: fadeIn 0.2s ease-out forwards;
  }

  .animate-fade-out {
    animation: fadeOut 0.2s ease-out forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(10px);
    }
  }
</style>